/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphanalyzer;

import java.awt.Graphics;
import java.awt.Graphics2D;
import static graphanalyzer.New_interface1.arrowHead;
import static graphanalyzer.New_interface1.ec;
import static graphanalyzer.New_interface1.edge;
import static graphanalyzer.New_interface1.edgeFlag;
import static graphanalyzer.New_interface1.edgecount;
import static graphanalyzer.New_interface1.i;
import static graphanalyzer.New_interface1.k;
import static graphanalyzer.New_interface1.node;
import static graphanalyzer.New_interface1.node_names;
import static graphanalyzer.New_interface1.outedge;
import static graphanalyzer.New_interface1.outnodec;
import static graphanalyzer.New_interface1.weight;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Polygon;

/**
 *
 * @author WOLFy
 */
public class Output extends javax.swing.JFrame {

    /**
     * Creates new form Output
     */
    public Output() {
        initComponents();
        jPanel1.repaint();
    }

    int curr_output=-1;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){
            public void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                Graphics2D g2 = (Graphics2D) g;
                if(edgecount!=-1)
                {
                    //   node[i] = new Ellipse2D.Double(Xcentre, Ycentre, w, h);
                    if(edgeFlag==1)
                    {
                        for(int j=0;j<=ec;j++){
                            g2.setStroke(new BasicStroke(3));
                            //                    if(outedge[j]==1)
                            //                   g2.setColor(Color.CYAN);
                            //                   else
                            g2.setColor(Color.BLUE);
                            g2.drawLine((int)edge[j][0],(int)edge[j][1],(int)edge[j][2],(int)edge[j][3]);
                        }

                        for(int j=0;j<=curr_output;j++){
                            g2.setStroke(new BasicStroke(3));
                            //                    if(outedge[j]==1)
                            //                   g2.setColor(Color.CYAN);
                            //                   else
                            g2.setColor(Color.CYAN);
                            g2.drawLine((int)edge[outedge[j]][0],(int)edge[outedge[j]][1],(int)edge[outedge[j]][2],(int)edge[outedge[j]][3]);
                        }
                    }
                    else if(edgeFlag==2)
                    {
                        int v1x,v1y,v2x,v2y,v3x,v3y;
                        for(int j=0;j<=ec;j++){
                            g2.setStroke(new BasicStroke(3));
                            g2.setColor(Color.BLUE);
                            g2.drawLine((int)edge[j][0],(int)edge[j][1],(int)edge[j][2],(int)edge[j][3]);
                            int centerX=(int)edge[j][2];
                            int centerY=(int)edge[j][3];
                            v1x=(int)edge[j][2]-20;
                            v1y=(int)edge[j][3];
                            v2x=(int)edge[j][2]-45;
                            v2y=(int)edge[j][3]+8;
                            v3x=(int)edge[j][2]-45;
                            v3y=(int)edge[j][3]-8;
                            double angle = Math.atan2(edge[j][3]-edge[j][1], edge[j][2]-edge[j][0]);
                            int x1r = (int) ((v1x - centerX) * Math.cos(angle) - (v1y - centerY) * Math.sin(angle) + centerX);
                            int y1r = (int) ((v1x - centerX) * Math.sin(angle) + (v1y - centerY) * Math.cos(angle) + centerY);

                            int x2r = (int) ((v2x - centerX) * Math.cos(angle) - (v2y - centerY) * Math.sin(angle) + centerX);
                            int y2r = (int) ((v2x - centerX) * Math.sin(angle) + (v2y - centerY) * Math.cos(angle) + centerY);

                            int x3r = (int) ((v3x - centerX) * Math.cos(angle) - (v3y - centerY) * Math.sin(angle) + centerX);
                            int y3r = (int) ((v3x - centerX) * Math.sin(angle) + (v3y - centerY) * Math.cos(angle) + centerY);
                            arrowHead[j]=new Polygon();
                            arrowHead[j].addPoint(x1r,y1r);
                            arrowHead[j].addPoint(x2r,y2r);
                            arrowHead[j].addPoint(x3r,y3r);
                            g2.fill(arrowHead[j]);
                        }

                        for(int j=0;j<=curr_output;j++){
                            g2.setStroke(new BasicStroke(3));
                            g2.setColor(Color.CYAN);
                            g2.drawLine((int)edge[j][0],(int)edge[j][1],(int)edge[j][2],(int)edge[j][3]);
                            int centerX=(int)edge[j][2];
                            int centerY=(int)edge[j][3];
                            v1x=(int)edge[j][2]-20;
                            v1y=(int)edge[j][3];
                            v2x=(int)edge[j][2]-45;
                            v2y=(int)edge[j][3]+8;
                            v3x=(int)edge[j][2]-45;
                            v3y=(int)edge[j][3]-8;
                            double angle = Math.atan2(edge[j][3]-edge[j][1], edge[j][2]-edge[j][0]);
                            int x1r = (int) ((v1x - centerX) * Math.cos(angle) - (v1y - centerY) * Math.sin(angle) + centerX);
                            int y1r = (int) ((v1x - centerX) * Math.sin(angle) + (v1y - centerY) * Math.cos(angle) + centerY);

                            int x2r = (int) ((v2x - centerX) * Math.cos(angle) - (v2y - centerY) * Math.sin(angle) + centerX);
                            int y2r = (int) ((v2x - centerX) * Math.sin(angle) + (v2y - centerY) * Math.cos(angle) + centerY);

                            int x3r = (int) ((v3x - centerX) * Math.cos(angle) - (v3y - centerY) * Math.sin(angle) + centerX);
                            int y3r = (int) ((v3x - centerX) * Math.sin(angle) + (v3y - centerY) * Math.cos(angle) + centerY);
                            arrowHead[j]=new Polygon();
                            arrowHead[j].addPoint(x1r,y1r);
                            arrowHead[j].addPoint(x2r,y2r);
                            arrowHead[j].addPoint(x3r,y3r);
                            g2.fill(arrowHead[j]);
                        }
                    }
                    else if(edgeFlag==3)
                    {
                        for(int j=0;j<=ec;j++){
                            g2.setStroke(new BasicStroke(3));
                            g2.setColor(Color.BLUE);
                            g2.drawLine((int)edge[j][0],(int)edge[j][1],(int)edge[j][2],(int)edge[j][3]);
                            g2.setColor(Color.BLACK);
                            g2.setFont(new Font("default", Font.BOLD, 16));
                            g2.drawString(Integer.toString(weight[j]),(int)((edge[j][0]+edge[j][2])/2)+15,(int)((edge[j][1]+edge[j][3])/2)+15);
                        }

                        for(int j=0;j<=curr_output;j++){
                            g2.setStroke(new BasicStroke(3));
                            g2.setColor(Color.CYAN);
                            g2.drawLine((int)edge[outedge[j]][0],(int)edge[outedge[j]][1],(int)edge[outedge[j]][2],(int)edge[outedge[j]][3]);
                        }
                    }
                }
                if(i!=-1)
                {
                    //   node[i] = new Ellipse2D.Double(Xcentre, Ycentre, w, h);
                    for(int j=0;j<=k;j++){
                        g2.setColor(Color.RED);
                        g2.fill(node[j]);
                        g2.setColor(Color.BLACK);
                        int diff=(int)g2.getFontMetrics().getStringBounds(node_names[j], g2).getWidth();
                        g2.drawString(node_names[j],(int)(node[j].getCenterX()-diff/2),(int)(node[j].getCenterY()+diff/3));
                    }
                }

            };
        };
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 917, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 619, Short.MAX_VALUE)
        );

        jButton1.setText(org.openide.util.NbBundle.getMessage(Output.class, "Output.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(org.openide.util.NbBundle.getMessage(Output.class, "Output.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(43, 43, 43)
                .addComponent(jButton1)
                .addGap(391, 391, 391))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    curr_output++;
    if(curr_output>outnodec)
    {
        jButton1.setEnabled(false);
    }
    else
        jButton2.setEnabled(true);
    jPanel1.repaint();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    curr_output--;
    if(curr_output<0)
    {
        jButton2.setEnabled(false);
    }
    else
        jButton1.setEnabled(true);
    jPanel1.repaint();    // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Output().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
